{"version":3,"sources":["contexts/ThemeContext.js","components/Navbar.js","components/CountryPreview.js","components/CountriesList.js","components/Loading.js","components/InfoRow.js","components/NotFound.js","components/BorderButton.js","components/CountryPage.js","hooks/useInputState.js","components/Search.js","components/Sort.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeProvider","props","useState","isDarkMode","setThemeMode","Provider","value","toggleTheme","children","Navbar","useContext","className","onClick","CountryPreview","populationWithComas","population","toString","replace","to","id","src","flag","alt","country","region","capital","CountriesList","countries","map","c","i","name","key","alpha3Code","Loading","InfoRow","title","NotFound","BorderButton","countryName","setCountryName","useEffect","a","getCountry","newCountry","data","getData","exact","CountryPage","setCountry","isLoading","setIsLoading","code","useParams","info","setInfo","notFound","setNotFound","currenciesToString","arr","strings","forEach","el","push","symbol","join","languagesToString","nativeName","Population","Region","subregion","Capital","topLevelDomain","Currencies","currencies","Languages","languages","renderMainContent","idx","Object","keys","values","borders","console","log","initVal","setValue","e","target","Search","useInputState","handleChange","filterCountries","onSubmit","preventDefault","type","placeholder","onChange","Sort","sortCountries","API_URL","App","setCountries","filteredCountries","setFilteredCountries","sortType","setSortType","length","Axios","get","response","updatedCountries","filter","toLowerCase","includes","sorted","sort","b","sortArray","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.debffadf.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport function ThemeProvider(props) {\r\n  const [isDarkMode, setThemeMode] = useState(false);\r\n  const toggleTheme = () => setThemeMode(!isDarkMode);\r\n  return (\r\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"./../contexts/ThemeContext\";\r\nimport \"./../style/Navbar.scss\";\r\n\r\nfunction Navbar(props) {\r\n  const { isDarkMode, toggleTheme } = useContext(ThemeContext);\r\n  return (\r\n    <nav className={isDarkMode ? \"Navbar Navbar--dark\" : \"Navbar\"}>\r\n      <h1 className='main-heading'>Where in the world?</h1>\r\n      <div\r\n        className={isDarkMode ? \"color-mode color-mode--dark\" : \"color-mode\"}\r\n        onClick={toggleTheme}>\r\n        <i className='fas fa-moon'></i> Dark Mode\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"./../contexts/ThemeContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./../style/CountryPreview.scss\";\r\n\r\nfunction CountryPreview(props) {\r\n  const { isDarkMode, toggleTheme } = useContext(ThemeContext);\r\n  const populationWithComas = props.population\r\n    .toString()\r\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n\r\n  return (\r\n    <Link to={`${props.id}`}>\r\n      <div\r\n        className={\r\n          isDarkMode ? \"CountryPreview CountryPreview--dark\" : \"CountryPreview\"\r\n        }>\r\n        <img\r\n          className='CountryPreview__flag'\r\n          src={props.flag}\r\n          alt={`Flag of ${props.country}`}\r\n        />\r\n        <div className='CountryPreview__box'>\r\n          <div className='CountryPreview__info'>\r\n            <h2 className='CountryPreview__heading-country'>{props.country}</h2>\r\n            {props.population > 0 && (\r\n              <div className='CountryPreview__row'>\r\n                <h3 className='CountryPreview__heading-minor'>Population:</h3>\r\n                {populationWithComas}\r\n              </div>\r\n            )}\r\n            {props.region && (\r\n              <div className='CountryPreview__row'>\r\n                <h3 className='CountryPreview__heading-minor'>Region:</h3>\r\n                {props.region}\r\n              </div>\r\n            )}\r\n            {props.capital && (\r\n              <div className='CountryPreview__row'>\r\n                <h3 className='CountryPreview__heading-minor'>Capital:</h3>\r\n                {props.capital}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default CountryPreview;\r\n","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"./../contexts/ThemeContext\";\r\nimport CountryPreview from \"./CountryPreview\";\r\nimport \"./../style/CountriesList.scss\";\r\n\r\nfunction CountriesList(props) {\r\n  const { isDarkMode, toggleTheme } = useContext(ThemeContext);\r\n  const { countries } = props;\r\n  return (\r\n    <main\r\n      className={\r\n        isDarkMode ? \"CountriesList CountriesList--dark\" : \"CountriesList\"\r\n      }>\r\n      {countries.map((c, i) => {\r\n        return (\r\n          <CountryPreview\r\n            country={c.name}\r\n            flag={c.flag}\r\n            population={c.population}\r\n            region={c.region}\r\n            capital={c.capital}\r\n            key={c.alpha3Code}\r\n            id={c.alpha3Code}\r\n          />\r\n        );\r\n      })}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default CountriesList;\r\n","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"./../contexts/ThemeContext\";\r\nimport \"./../style/Loading.scss\";\r\n\r\nfunction Loading() {\r\n  const { isDarkMode, toggleTheme } = useContext(ThemeContext);\r\n  return (\r\n    <div className='Loading'>\r\n      <i\r\n        className={\r\n          isDarkMode\r\n            ? \"Loading-icon Loading-icon--dark fas fa-globe-americas\"\r\n            : \"Loading-icon fas fa-globe-americas\"\r\n        }></i>\r\n      <span className='Loading-text'>Loading countries...</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport \"./../style/InfoRow.scss\";\r\n\r\nfunction InfoRow(props) {\r\n  const { title, value } = props;\r\n  return (\r\n    <li className='InfoRow'>\r\n      <span>{title}: </span> {value}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default InfoRow;\r\n","import React from \"react\";\r\nimport \"./../style/NotFound.scss\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className='NotFound'>\r\n      <i className='NotFound-icon far fa-compass'></i>\r\n      <span className='NotFound-text'>Page not found</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ThemeContext } from \"./../contexts/ThemeContext\";\r\nimport \"./../style/BorderButton.scss\";\r\n\r\nfunction BorderButton(props) {\r\n  const { isDarkMode, toggleTheme } = useContext(ThemeContext);\r\n  const [countryName, setCountryName] = useState(\"Loading...\");\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      const newCountry = await props.getCountry(props.country);\r\n      setCountryName(newCountry.data.name);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <Link\r\n      exact\r\n      to={`/${props.country}`}\r\n      className={\r\n        isDarkMode\r\n          ? \"BorderButton__btn BorderButton__btn--dark\"\r\n          : \"BorderButton__btn\"\r\n      }>\r\n      {countryName}\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default BorderButton;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { ThemeContext } from \"./../contexts/ThemeContext\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport Loading from \"./Loading\";\r\nimport \"./../style/CountryPage.scss\";\r\nimport InfoRow from \"./InfoRow\";\r\nimport NotFound from \"./NotFound\";\r\nimport BorderButton from \"./BorderButton\";\r\n\r\nfunction CountryPage(props) {\r\n  const { isDarkMode, toggleTheme } = useContext(ThemeContext);\r\n  const [country, setCountry] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const { code } = useParams();\r\n  const [info, setInfo] = useState([]);\r\n  const [notFound, setNotFound] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    async function getData() {\r\n      const newCountry = await props.getCountry(code);\r\n      if (!newCountry) {\r\n        setNotFound(true);\r\n        setIsLoading(false);\r\n      } else {\r\n        setCountry(newCountry.data);\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n    getData();\r\n  }, [code]);\r\n\r\n  useEffect(() => {\r\n    if (!isLoading && !notFound) {\r\n      setInfo([\r\n        { \"Native Name\": country.nativeName },\r\n        {\r\n          Population: country.population\r\n            .toString()\r\n            .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n        },\r\n        { Region: country.region },\r\n        { \"Sub Region\": country.subregion },\r\n        { Capital: country.capital },\r\n        { \"Top Level Domain\": country.topLevelDomain.join(\", \") },\r\n        {\r\n          Currencies: currenciesToString(country.currencies),\r\n        },\r\n        { Languages: languagesToString(country.languages) },\r\n      ]);\r\n    }\r\n  }, [isLoading]);\r\n\r\n  function currenciesToString(arr) {\r\n    let strings = [];\r\n    arr.forEach((el) => {\r\n      strings.push(`${el.code} ${el.name} (${el.symbol})`);\r\n    });\r\n    return strings.join(\", \");\r\n  }\r\n\r\n  function languagesToString(arr) {\r\n    let strings = [];\r\n    arr.forEach((el) => {\r\n      strings.push(`${el.name} (${el.nativeName})`);\r\n    });\r\n    return strings.join(\", \");\r\n  }\r\n\r\n  let renderMainContent = notFound ? (\r\n    <NotFound />\r\n  ) : (\r\n    <>\r\n      <div className='CountryPage__flagBox'>\r\n        <img src={country.flag} alt={`Flag of ${country.name}`} />\r\n      </div>\r\n      <div className='CountryPage__infoBox'>\r\n        <h2 className='CountryPage__heading-country'>{country.name}</h2>\r\n        <ul className='CountryPage__info'>\r\n          {info.map((i, idx) => {\r\n            return (\r\n              <InfoRow\r\n                title={Object.keys(i)[0]}\r\n                value={Object.values(i)[0]}\r\n                key={idx}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n        <div className='CountryPage__borders'>\r\n          <span>Borders: </span>\r\n          {country.borders &&\r\n            country.borders.map((c) => {\r\n              return <BorderButton country={c} getCountry={props.getCountry} />;\r\n            })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className='CountryPage'>\r\n      {console.log(\"CountryPage rerenders with code: \" + code)}\r\n      <Link to='./'>\r\n        <button\r\n          className={\r\n            isDarkMode\r\n              ? \"CountryPage__backButton CountryPage__backButton--dark\"\r\n              : \"CountryPage__backButton\"\r\n          }>\r\n          <i className='fas fa-long-arrow-alt-left'></i> Back\r\n        </button>\r\n      </Link>\r\n      <div className='CountryPage__container'>\r\n        {isLoading ? <Loading /> : renderMainContent}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryPage;\r\n","import { useState } from \"react\";\r\n\r\nexport default (initVal) => {\r\n  const [value, setValue] = useState(initVal);\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  return [value, handleChange, reset];\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { ThemeContext } from \"./../contexts/ThemeContext\";\r\nimport \"./../style/Search.scss\";\r\nimport useInputState from \"./../hooks/useInputState\";\r\n\r\nfunction Search(props) {\r\n  const { isDarkMode, toggleTheme } = useContext(ThemeContext);\r\n  const [value, handleChange] = useInputState(\"\");\r\n\r\n  useEffect(() => {\r\n    props.filterCountries(value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className='Search'>\r\n      <div className='Search__container'>\r\n        <form className='Search__form' onSubmit={(e) => e.preventDefault()}>\r\n          <input\r\n            className={\r\n              isDarkMode ? \"Search__input Search__input--dark\" : \"Search__input\"\r\n            }\r\n            type='text'\r\n            placeholder='Search for a country...'\r\n            value={value}\r\n            onChange={handleChange}\r\n          />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { ThemeContext } from \"./../contexts/ThemeContext\";\r\nimport \"./../style/Sort.scss\";\r\nimport useInputState from \"../hooks/useInputState\";\r\n\r\nfunction Sort(props) {\r\n  const { isDarkMode, toggleTheme } = useContext(ThemeContext);\r\n  const [value, handleChange] = useInputState(\"nameAZ\");\r\n\r\n  useEffect(() => {\r\n    props.sortCountries(value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className='Sort'>\r\n      <div className='Sort__container'>\r\n        <form className='Sort__form' onSubmit={(e) => e.preventDefault()}>\r\n          <select\r\n            className={\r\n              isDarkMode ? \"Sort__select Sort__select--dark\" : \"Sort__select\"\r\n            }\r\n            onChange={handleChange}>\r\n            <option value='nameAZ'>Country name A-Z</option>\r\n            <option value='nameZA'>Country name Z-A</option>\r\n            <option value='populationLTH'>Population low to high</option>\r\n            <option value='populationHTL'>Population high to low</option>\r\n          </select>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sort;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport CountriesList from \"./components/CountriesList\";\r\nimport CountryPage from \"./components/CountryPage\";\r\nimport NotFound from \"./components/NotFound\";\r\nimport Search from \"./components/Search\";\r\nimport Sort from \"./components/Sort\";\r\nimport \"./style/App.scss\";\r\nimport Axios from \"axios\";\r\nimport Loading from \"./components/Loading\";\r\nimport { ThemeContext } from \"./contexts/ThemeContext\";\r\n\r\nconst API_URL = \"https://restcountries.eu/rest/v2/\";\r\n\r\nfunction App(props) {\r\n  const [countries, setCountries] = useState([]);\r\n  const [filteredCountries, setFilteredCountries] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [sortType, setSortType] = useState(\"nameAZ\");\r\n  const { isDarkMode, toggleTheme } = useContext(ThemeContext);\r\n\r\n  useEffect(() => {\r\n    if (countries.length === 0) {\r\n      async function getData() {\r\n        const response = await Axios.get(`${API_URL}all`);\r\n        setCountries(response.data);\r\n      }\r\n      getData();\r\n    }\r\n\r\n    setIsLoading(false);\r\n    filterCountries();\r\n  }, [countries]);\r\n\r\n  const filterCountries = (value) => {\r\n    if (!value) return setFilteredCountries(countries);\r\n    let updatedCountries = countries.filter((c) => {\r\n      return c.name.toLowerCase().includes(value.toLowerCase());\r\n    });\r\n    setFilteredCountries(updatedCountries);\r\n  };\r\n\r\n  const getCountry = async (code) => {\r\n    let response;\r\n    try {\r\n      response = await Axios.get(`${API_URL}alpha/${code}`);\r\n    } catch (error) {\r\n      response = false;\r\n    } finally {\r\n      return response;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const sortArray = () => {\r\n      let sorted;\r\n      switch (sortType) {\r\n        case \"nameAZ\":\r\n          sorted = [...countries].sort((a, b) => {\r\n            if (a[\"name\"] < b[\"name\"]) {\r\n              return -1;\r\n            }\r\n            if (b[\"name\"] < a[\"name\"]) {\r\n              return 1;\r\n            }\r\n            return 0;\r\n          });\r\n          break;\r\n        case \"nameZA\":\r\n          sorted = [...countries].sort((a, b) => {\r\n            if (a[\"name\"] > b[\"name\"]) {\r\n              return -1;\r\n            }\r\n            if (b[\"name\"] > a[\"name\"]) {\r\n              return 1;\r\n            }\r\n            return 0;\r\n          });\r\n          break;\r\n        case \"populationLTH\":\r\n          sorted = [...countries].sort(\r\n            (a, b) => a[\"population\"] - b[\"population\"]\r\n          );\r\n          break;\r\n        case \"populationHTL\":\r\n          sorted = [...countries].sort(\r\n            (a, b) => b[\"population\"] - a[\"population\"]\r\n          );\r\n          break;\r\n      }\r\n      setCountries(sorted);\r\n      setFilteredCountries(sorted);\r\n    };\r\n\r\n    sortArray();\r\n  }, [sortType]);\r\n\r\n  const sortCountries = (type) => {\r\n    setSortType(type);\r\n  };\r\n\r\n  let renderMainContent = (\r\n    <>\r\n      <div className='SearchSort__container'>\r\n        <Search filterCountries={filterCountries} />\r\n        <Sort sortCountries={sortCountries} />\r\n      </div>\r\n\r\n      {countries.length !== 0 ? (\r\n        <CountriesList countries={filteredCountries} />\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className={isDarkMode ? \"App App--dark\" : \"App\"}>\r\n      <Navbar />\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path='/'\r\n          render={() => {\r\n            return isLoading ? <Loading /> : renderMainContent;\r\n          }}\r\n        />\r\n        <Route exact path='/:code'>\r\n          <CountryPage getCountry={getCountry} />\r\n        </Route>\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./style/base.scss\";\nimport \"./style/typography.scss\";\nimport { ThemeProvider } from \"./contexts/ThemeContext\";\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <ThemeProvider>\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}